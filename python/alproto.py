#!/usr/bin/env python
# generated by wxGlade 0.6.4 on Mon Sep 24 20:13:40 2012
#
# On Ubuntu 12.04:
#
#  > PYTHONPATH=/usr/lib/python2.7/dist-packages/wx-2.8-gtk2-unicode/wx/lib/floatcanvas/ ./alproto.py ~/lcluster/data/1277382434Image0000*.jpg 

import sys
import wx
from FloatCanvas import FloatCanvas

# begin wxGlade: extracode
# end wxGlade


class ActiveLearningPrototype(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ActiveLearningPrototype.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, -1, style=wx.SP_3D | wx.SP_BORDER)
        self.window_1_pane_1 = wx.ScrolledWindow(self.window_1, -1, style=wx.TAB_TRAVERSAL)
        self.imageBitmap = wx.StaticBitmap(self.window_1_pane_1, -1, wx.Bitmap("Fat-guy-eating-giant-hamburger.jpg", wx.BITMAP_TYPE_ANY))
        self.window_1_pane_2 = wx.Panel(self.window_1, -1)
        self.notebook_1 = wx.Notebook(self.window_1_pane_2, -1, style=0)
        self.notebook_1_pane_1 = wx.ScrolledWindow(self.notebook_1, -1, style=wx.TAB_TRAVERSAL)
        self.canvasPos = FloatCanvas(self.notebook_1_pane_1, -1)
        self.notebook_1_pane_2 = wx.ScrolledWindow(self.notebook_1, -1, style=wx.TAB_TRAVERSAL)
        self.canvasNeg = FloatCanvas(self.notebook_1_pane_2, -1)
        self.static_line_1 = wx.StaticLine(self, -1)
        self.buttonPrev = wx.Button(self, -1, "prev")
        self.buttonNext = wx.Button(self, -1, "next")
        self.buttonTrain = wx.Button(self, -1, "train")
        self.buttonScan = wx.Button(self, -1, "scan")
        self.panel_2 = wx.ScrolledWindow(self, -1, style=wx.TAB_TRAVERSAL)
        self.textMessages = wx.TextCtrl(self.panel_2, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.onButtonPrev, self.buttonPrev)
        self.Bind(wx.EVT_BUTTON, self.onButtonNext, self.buttonNext)
        self.Bind(wx.EVT_BUTTON, self.onButtonTrain, self.buttonTrain)
        self.Bind(wx.EVT_BUTTON, self.onButtonScan, self.buttonScan)
        # end wxGlade
        self.imageFns = []
        self.currImage = -1

    def __set_properties(self):
        # begin wxGlade: ActiveLearningPrototype.__set_properties
        self.SetTitle("ActiveLearningPrototype")
        self.SetSize((1200, 800))
        self.imageBitmap.SetBackgroundColour(wx.Colour(255, 0, 255))
        self.window_1_pane_1.SetScrollRate(10, 10)
        self.notebook_1_pane_1.SetScrollRate(10, 10)
        self.notebook_1_pane_2.SetScrollRate(10, 10)
        self.panel_2.SetScrollRate(10, 10)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ActiveLearningPrototype.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(2, 1, 0, 0)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_2 = wx.FlexGridSizer(2, 3, 0, 0)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.imageBitmap, 1, wx.EXPAND | wx.ADJUST_MINSIZE, 0)
        self.window_1_pane_1.SetSizer(sizer_2)
        sizer_4.Add(self.canvasPos, 1, wx.EXPAND, 0)
        self.notebook_1_pane_1.SetSizer(sizer_4)
        sizer_6.Add(self.canvasNeg, 1, wx.EXPAND, 0)
        self.notebook_1_pane_2.SetSizer(sizer_6)
        self.notebook_1.AddPage(self.notebook_1_pane_1, "positives")
        self.notebook_1.AddPage(self.notebook_1_pane_2, "negatives")
        sizer_3.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.window_1_pane_2.SetSizer(sizer_3)
        self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2)
        sizer_1.Add(self.window_1, 1, wx.ALL | wx.EXPAND, 0)
        sizer_1.Add(self.static_line_1, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_2.Add(self.buttonPrev, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.buttonNext, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.buttonTrain, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.buttonScan, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        sizer_5.Add(self.textMessages, 1, wx.EXPAND | wx.ADJUST_MINSIZE, 0)
        self.panel_2.SetSizer(sizer_5)
        grid_sizer_1.Add(self.panel_2, 1, wx.EXPAND, 0)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.SetSize((1200, 800))
        # end wxGlade

    def setImages(self,imageFns):
        self.imageFns = imageFns
        self.currImage = 0
        self.drawCurrentImage()

    def drawCurrentImage( self ):
        if self.currImage >= 0:
            self.imageBitmap.SetBitmap( \
                wx.Bitmap(self.imageFns[self.currImage], wx.BITMAP_TYPE_ANY) )
        self.message( "Image %d" % self.currImage )

    def onButtonPrev(self, event):  # wxGlade: ActiveLearningPrototype.<event_handler>
        if self.currImage > 0:
            self.currImage -= 1
            self.drawCurrentImage()

    def onButtonNext(self, event):  # wxGlade: ActiveLearningPrototype.<event_handler>
        if self.currImage < len(self.imageFns)-1:
            self.currImage += 1
            self.drawCurrentImage()

    def onButtonTrain(self, event):  # wxGlade: ActiveLearningPrototype.<event_handler>
        print "Event handler `onButtonTrain' not implemented"
        event.Skip()

    def onButtonScan(self, event):  # wxGlade: ActiveLearningPrototype.<event_handler>
        print "Event handler `onButtonScan' not implemented"
        event.Skip()

    def message(self, msg):
        # Append a text message to the text widget.
        self.textMessages.AppendText( msg + "\n" )

# end of class ActiveLearningPrototype
if __name__ == "__main__":
    # The args are the image filenames.
    fns = sys.argv[1:]
    if len(fns)==0:
        sys.exit( "No image filenames specified!" )

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = ActiveLearningPrototype(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    frame_1.setImages( fns )
    frame_1.message( "Loading %d images" % len(fns) )
    app.MainLoop()
