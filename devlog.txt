Entries in this file are separated by ===. New entries are added to
the top of the file rather than the end.

=== 2012-09-24 JRS v

Added "python" directory with active learning prototype, created with wxglade:

   > wxglade alproto.wxg

This editor allows you to manipulate the widgets and layout, while maintaining the custom code you
have added.  You click "generate code" to regenerate the python source, without over-writing.

It uses floatCanvas (at the moment) which on my OS wasn't on the path, see the
cmd line at the top of the file.

To use it, simply supply the filenames of the images as args. 


=== 2012-09-23 JRS v

Inputs: images that might contain object (signs)

Overall algorithm:

1. Init: User marks b boxes of some positives, negatives  in the images

While true:

   2. Train: crop, normalise, extract ftrs, train classifier.
   
   3. Scan:  for each image:
     For each scale and position:
       Crop sub image, normalise, extract ftrs
       Classify as pos or Jeb
     Post process detections
     Output: set of detections
   4. Refine: user labels false positives, if any.
     Add labelled detections to training set and retrain classifier

End while


Some general comments:

+ it would be good if we can run it on one machine during development.  We could
just replace the hadoop training with a different m/c learning library at that point.

+ in general we should store original image and bounding box rather than storing
cropped images.  The main reason is that feature extractaion and normalisation
might need some context around the sub-image.  For instance in a csv file:

   sourceImage1.png,ulx,uly,w,h
   ...

Rich you probably would want to store as xml?


===

Added some more functionality to the SWT app. There is now a selection
box, some sort of reasonable layout and a button that would save a
part of the image if that code were written at all.

Modified the Rakefile to handle the fact that swt needs different
libraries for 32 and 64 bit.

===

Modified the feature generation program to generate features for
images but as yet there are no images for classification.

Add very basic SWT functionality. It can display a scaled version of an
input image. This idea is to sophisticate this program into something
that can be used to generate training instances.

Rather than sophisticate the rake script to checkin the SWT jar
instead I've just included it in a lib directory. If it takes up too
much space we can extend the rake script to download it as part of
pulling dependencies.

I copied BuildForest out of Mahout thinking of modifying it, however I
think that it's friend TestForest is the one we really want to modify
as BuildForest can be called from the command line with the training
input file generated by GenFeatures, while TestForest in contrast
would be presented with too much data and needs data generated from
images to run.

===

Doing some basic project setup for eclipse. Create some
directories. Wrote a rake script that downloads Mahout and unpacks it
in the build directory and then updates the .classpath (used by
Eclipse) to point at it's jars and src. This is in prepartion for the
next step, i.e. running the learned decision tree forest over the
image set to find matches. I antisipate that this will require writing
some custom java code and slotting it into Mahout.

The current instructions for setting up the project after checking it out are:

1. rake
2. import the project into eclipse

It should be linked to the jars and src inside mahout.



